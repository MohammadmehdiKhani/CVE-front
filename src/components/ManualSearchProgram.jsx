import React from "react";
import { useState, useEffect } from "react";
import { validate, validateField } from "../services/validation.js";
import http from "../services/httpService.js";
import Joi, { schema } from "joi-browser";
import CPEtable from "./CPEtable";
import PropagateLoader from "react-spinners/PropagateLoader";
import SyncLoader from "react-spinners/SyncLoader";
import { toast } from "react-toastify";
import "../index.css";
import "../style/loginAndRegister.css";
import "../style/searchProgram.css";
const { SERVER_BASE_URL } = require("../env");

const ManualSearchProgram = () => {
  const [keyWord, setKeyWord] = useState("");
  const [error, setError] = useState("");
  const [cpes, setCPEs] = useState([]);
  let [loading, setLoading] = useState(false);
  let [loadingOfAddition, setLoadingOfAddition] = useState(false);
  const [isTotalResultZero, setIsTotalResultZero] = useState(false);

  const schema = {
    keyWord: Joi.string()
      .required()
      .min(3)
      .error((error) => {
        return error.map((error) => {
          switch (error.type) {
            case "string.min":
              return { message: "کلید واژه باید حداقل 3 کاراکتر باشد!" };
            case "any.empty":
              return { message: "کلید واژه نمی‌تواند خالی باشد!" };
          }
        });
      }),
  };

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await http.get(`${SERVER_BASE_URL}/users/me`, {
          headers: { "x-auth-token": localStorage.getItem("token") },
        });
      } catch (e) {
        if (e.response && e.response.status == 401) {
          window.location = "/";
        }
      }
    }
    fetchData();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (keyWord === "") {
      toast.error("نمیتواند خالی باشد cpeNameId");
      setCPEs([]);
      return;
    }
    //const joiError = validate(keyWord, schema);

    //setError(joiError);

    //if (joiError) return;

    setLoading(true);

    try {
      const response = await http.get(
        `${SERVER_BASE_URL}/cpes/?cpeNameId=${keyWord}`
      );

      if (response.data.totalResults >= 0) {
        setCPEs(response.data.products);
        setIsTotalResultZero(false);
      } else {
        toast.error("برنامه مورد نظر یافت نشد");
        setCPEs([]);
        setIsTotalResultZero(true);
      }
      console.log(response.status);
      if (
        response.status === 500 ||
        response.status === 404 ||
        response.status === 400
      ) {
        toast.error("برنامه مورد نظر یافت نشد");
        setCPEs([]);
      }
      setLoading(false);
    } catch (e) {
      setIsTotalResultZero(true);
      setLoading(false);
      setCPEs([]);
      toast.error("برنامه مورد نظر یافت نشد");
    }
  };

  const handleChange = async (e) => {
    //const errorsClone = { ...error };
    //const message = validateField(e, schema);
    //if (message) errorsClone[e.target.name] = message;
    //else delete errorsClone[e.target.name];

    //const acountClone = { ...keyWord };
    //acountClone[e.target.name] = e.target.value;
    setKeyWord(e.target.value);
    //setError(errorsClone);
  };

  return (
    <div>
      <div className="centeral-container">
        <form onSubmit={handleSubmit} className="search-form" noValidate>
          <label className="ho">
            <span className="label-of-search-box farsi">
              جستجوی دستی برنامه
            </span>
          </label>
          <input
            className="form-control mt-1 farsi"
            type="text"
            placeholder="cpeNameId برنامه مورد نظرتان را وارد کنید"
            id="username-input"
            name="username"
            onChange={handleChange}
          ></input>
          {error && <div className="alert alert-danger farsi">{error}</div>}
          <div className="reset-and-search-button">
            <button
              onClick={() => {
                setKeyWord("");
                setError("");
              }}
              className="btn btn-outline-dark reset-btn-of-login-form"
              type="reset"
            >
              <div className="btns-row-of-submit-and-reset-btn farsi">
                بازنشانی
              </div>
            </button>
            <button
              className="btn btn-primary search-btn"
              type="submit"
              disabled={error}
            >
              <div className="btns-row-of-submit-and-reset-btn farsi">
                جستجو
              </div>
            </button>
          </div>
        </form>

        <PropagateLoader
          className="mt-3"
          color={"#a4b5ff"}
          loading={loading}
          size={12}
          aria-label="Loading Spinner"
          data-testid="loader"
        />

        <SyncLoader
          className="mt-3"
          color={"#a4b5ff"}
          loading={loadingOfAddition}
          size={12}
          aria-label="Loading Spinner"
          data-testid="loader"
        />
      </div>

      <div className="centeral-container">
        {cpes[0] && (
          <CPEtable
            items={cpes}
            makeLoadingOfAdditionTrue={() => {
              setLoadingOfAddition(true);
            }}
            makeLoadingOfAdditionFalse={() => {
              setLoadingOfAddition(false);
            }}
          ></CPEtable>
        )}

        {isTotalResultZero && !cpes[0] && (
          <div className="farsi"> برنامه‌ای پیدا نشد</div>
        )}

        <a
          href="https://nvd.nist.gov/"
          className="go-to-login-register-link farsi"
          target="_blank"
        >
          cpeNameId مورد نظرتان را از اینجا پیدا کنید.
        </a>
      </div>
    </div>
  );
};
export default ManualSearchProgram;
