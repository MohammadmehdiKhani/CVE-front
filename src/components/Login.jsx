import React from "react";
import { useState, useEffect } from "react";
import { validate, validateField } from "../services/validation.js";
import http from "../services/httpService.js";
import Joi, { schema } from "joi-browser";
import { Link, Navigate } from "react-router-dom";
import "../style/login.css";
import { toast } from "react-toastify";
import "../index.css";

const Login = ({ user }) => {
  const [acount, setAcount] = useState({ username: "", password: "" });
  const [errors, setErrors] = useState({ username: "", password: "" });

  const schema = {
    username: Joi.string()
      .required()
      .min(3)
      .error((errors) => {
        return errors.map((error) => {
          switch (error.type) {
            case "string.min":
              return { message: "نام کاربری باید حداقل 3 کاراکتر باشد!" };
            case "any.empty":
              return { message: "نام کاربری نمی‌تواند خالی باشد!" };
          }
        });
      }),
    password: Joi.string()
      .required()
      .min(3)
      .error((errors) => {
        return errors.map((error) => {
          switch (error.type) {
            case "string.min":
              return { message: "رمز عبور باید حداقل 3 کاراکتر باشد!" };
            case "any.empty":
              return { message: "رمز عبور نمی‌تواند خالی باشد!" };
          }
        });
      }),
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const joiErrors = validate(acount, schema);

    setErrors(joiErrors || {});

    if (joiErrors) return;

    try {
      const response = await http.post("http://localhost:3001/login", acount);
      localStorage.setItem("token", response.data.token);
      toast.success("ورود موفقیت آمیز");
      window.location = "/";
    } catch (e) {
      if (e.response && e.response.status == 400) {
        const errorsClone = { ...errors };
        errorsClone.username = e.response.data;
        setErrors(errorsClone);
      }
    }
  };

  const handleChange = async (e) => {
    const errorsClone = { ...errors };
    const message = validateField(e, schema);
    if (message) errorsClone[e.target.name] = message;
    else delete errorsClone[e.target.name];

    const acountClone = { ...acount };
    acountClone[e.target.name] = e.target.value;
    setAcount(acountClone);
    setErrors(errorsClone);
  };

  return (
    <div>
      {user.username && <Navigate to="/" replace />}
      <div className="container">
        <div className="row login-form-row">
          <div className="col-5 simple-card">
            <form onSubmit={handleSubmit} className="login-form" noValidate>
              <div className="form-row">
                <div className="col username-col">
                  <div className="form-group right2left">
                    <label>
                      <span className="label_of_login_form_fields farsi">
                        نام کاربری
                      </span>
                    </label>
                    <input
                      className="form-control mt-1 farsi"
                      type="text"
                      placeholder="نام کاربری را وارد کنید"
                      id="username-input"
                      name="username"
                      onChange={handleChange}
                    ></input>
                    {errors.username && (
                      <div className="alert alert-danger farsi">
                        {errors.username}
                      </div>
                    )}
                  </div>
                </div>
              </div>

              <div className="form-row mt-2">
                <div className="col">
                  <div className="form-group right2left mt-1">
                    <label>
                      <span className="label_of_login_form_fields farsi">
                        رمز عبور
                      </span>
                    </label>
                    <input
                      className="form-control farsi mt-1"
                      type="password"
                      placeholder="رمز عبور را وارد کنید"
                      id="password-input"
                      name="password"
                      onChange={handleChange}
                    ></input>
                    {errors.password && (
                      <div className="alert alert-danger farsi">
                        {errors.password}
                      </div>
                    )}
                  </div>
                </div>
              </div>

              <div className="btns-row-and-login-link">
                <div className="form-row mt-4 btns-row-of-login-page">
                  <button
                    className="btn btn-primary submit_btn_of_login_page"
                    type="submit"
                    disabled={errors.username || errors.password}
                  >
                    <div className="btns-row-of-submit-and-reset-btn farsi">
                      ورود
                    </div>
                  </button>

                  <button
                    onClick={() => {
                      setAcount({ username: "", password: "" });
                      setErrors({ username: "", password: "" });
                    }}
                    className="btn btn-outline-dark reset-btn-of-login-form"
                    type="reset"
                  >
                    <div className="btns-row-of-submit-and-reset-btn farsi">
                      بازنشانی
                    </div>
                  </button>
                </div>
                <Link to="/register" className="farsi mt-1">
                  حساب کاربری ندارید؟ اینجا ثبت نام کنید.
                </Link>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};
export default Login;
