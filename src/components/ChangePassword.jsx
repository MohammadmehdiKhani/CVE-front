import React, { useState, useEffect } from "react";
import http from "../services/httpService.js";
import { toast } from "react-toastify";
import { validate, validateField } from "../services/validation.js";
import Joi from "joi-browser";
import "../style/loginAndRegister.css";
import "../style/profilePage.css";
require("dotenv").config();

const ChangePassword = ({ user }) => {
  const [data, setData] = useState({
    oldPassword: "",
    newPassword: "",
    newPasswordRepeat: "",
  });
  const [errors, setErrors] = useState({
    oldPassword: "",
    newPassword: "",
    newPasswordRepeat: "",
  });

  const schema = {
    oldPassword: Joi.string()
      .required()
      .min(3)
      .error((errors) => {
        return errors.map((error) => {
          switch (error.type) {
            case "any.empty":
              return { message: "رمز عبور نمی‌تواند خالی باشد!" };
            case "string.min":
              return { message: "رمز عبور نمیتواند کمتر از 3 حرف باشد!" };
          }
        });
      }),

    newPassword: Joi.string()
      .required()
      .min(3)
      .error((errors) => {
        return errors.map((error) => {
          switch (error.type) {
            case "any.empty":
              return { message: "رمز عبور نمی‌تواند خالی باشد!" };
            case "string.min":
              return { message: "رمز عبور نمیتواند کمتر از 3 حرف باشد!" };
          }
        });
      }),

    newPasswordRepeat: Joi.string()
      .required()
      .min(3)
      .error((errors) => {
        return errors.map((error) => {
          switch (error.type) {
            case "any.empty":
              return { message: "رمز عبور نمی‌تواند خالی باشد!" };
            case "string.min":
              return { message: "رمز عبور نمیتواند کمتر از 3 حرف باشد!" };
          }
        });
      }),
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const joiErrors = validate(data, schema);
    setErrors(joiErrors || {});

    if (data.newPassword !== data.newPasswordRepeat)
      setErrors({
        oldPassword: errors.oldPassword,
        newPassword: errors.newPassword,
        newPasswordRepeat: "تکرار رمز عبور جدید با رمز عبور جدید مطابق نیست!",
      });

    if (joiErrors || data.newPassword !== data.newPasswordRepeat) return;

    try {
      const response = await http.put(
        `${process.env.SERVER_BASE_URL}/users/me/password`,
        {
          oldPassword: data.oldPassword,
          newPassword: data.newPassword,
          newPasswordRepeat: data.newPasswordRepeat,
        },
        { headers: { "x-auth-token": localStorage.getItem("token") } }
      );
      toast.success("رمز عبور تغییر کرد");
    } catch (e) {
      if (e.response && e.response.status == 400) {
        const errorsClone = { ...errors };
        errorsClone.username = e.response.data;
        toast.error(e.response.data.error);
        setErrors(errorsClone);
      }
    }
  };

  const handleChange = async (e) => {
    const errorsClone = { ...errors };
    const message = validateField(e, schema);
    if (message) errorsClone[e.target.name] = message;
    else delete errorsClone[e.target.name];

    const dataClone = { ...data };
    dataClone[e.target.name] = e.target.value;
    setData(dataClone);
    setErrors(errorsClone);
  };

  return (
    <div className="simple-card">
      <form className="login-form" onSubmit={handleSubmit} noValidate>
        <div className="form-group right2left">
          <label htmlFor="old-password-input">
            <span className="label_of_login_form_fields farsi">
              رمز عبور قبلی
            </span>
          </label>
          <input
            className="form-control farsi password-input"
            type="password"
            placeholder="رمز عبور قبلی خود را وارد کنید"
            id="old-password-input"
            name="oldPassword"
            onChange={handleChange}
          ></input>
          {errors.oldPassword && (
            <div className="alert alert-danger farsi">{errors.oldPassword}</div>
          )}
        </div>

        <div className="form-group right2left password-form-group">
          <label>
            <span className="label_of_login_form_fields farsi">
              رمز عبور جدید
            </span>
          </label>
          <input
            className="form-control farsi password-input"
            type="password"
            placeholder="رمز عبور جدید را وارد کنید"
            id="new-password-input"
            name="newPassword"
            onChange={handleChange}
          ></input>
          {errors.newPassword && (
            <div className="alert alert-danger farsi">{errors.newPassword}</div>
          )}
        </div>

        <div className="form-group right2left password-form-group">
          <label>
            <span className="label_of_login_form_fields farsi">
              تکرار رمز عبور جدید
            </span>
          </label>
          <input
            className="form-control farsi password-input"
            type="password"
            placeholder="رمز عبور جدید را مجددا وارد کنید"
            id="new-password-repeat-input"
            name="newPasswordRepeat"
            onChange={handleChange}
          ></input>
          {errors.newPasswordRepeat && (
            <div className="alert alert-danger farsi">
              {errors.newPasswordRepeat}
            </div>
          )}
        </div>

        <div className="submit-button">
          <button
            disabled={
              errors.newPassword ||
              errors.oldPassword ||
              errors.newPasswordRepeat
            }
            className="btn btn-primary submit_btn_of_login_page"
            type="submit"
          >
            <div className="farsi">تغییر رمز عبور</div>
          </button>
        </div>
      </form>
    </div>
  );
};

export default ChangePassword;
