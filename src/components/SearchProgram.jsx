import React from "react";
import { useState, useEffect } from "react";
import { validate, validateField } from "../services/validation.js";
import http from "../services/httpService.js";
import Joi, { schema } from "joi-browser";
import CPEtable from "./CPEtable";
import PropagateLoader from "react-spinners/PropagateLoader";
import SyncLoader from "react-spinners/SyncLoader";
import "../index.css";
import "../style/loginAndRegister.css";

const SearchProgram = () => {
  const [keyWord, setKeyWord] = useState("");
  const [error, setError] = useState("");
  const [cpes, setCPEs] = useState([]);
  let [loading, setLoading] = useState(false);
  let [loadingOfAddition, setLoadingOfAddition] = useState(false);

  const schema = {
    keyWord: Joi.string()
      .required()
      .min(3)
      .error((error) => {
        return error.map((error) => {
          switch (error.type) {
            case "string.min":
              return { message: "کلید واژه باید حداقل 3 کاراکتر باشد!" };
            case "any.empty":
              return { message: "کلید واژه نمی‌تواند خالی باشد!" };
          }
        });
      }),
  };

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await http.get("http://localhost:3001/users/me", {
          headers: { "x-auth-token": localStorage.getItem("token") },
        });
      } catch (e) {
        if (e.response && e.response.status == 401) {
          window.location = "/";
        }
      }
    }
    fetchData();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();

    //const joiError = validate(keyWord, schema);

    //setError(joiError);

    //if (joiError) return;

    setLoading(true);

    try {
      const response = await http.get(
        `http://localhost:3001/cpes/?keyWord=${keyWord}`
      );

      setLoading(false);
      console.log(response.data.products);
      setCPEs(response.data.products);
    } catch (e) {
      if (e.response && e.response.status == 400) {
        const errorsClone = { ...error };
        errorsClone.username = e.response.data;
        setError(errorsClone);
      }
    }
  };

  const handleChange = async (e) => {
    //const errorsClone = { ...error };
    //const message = validateField(e, schema);
    //if (message) errorsClone[e.target.name] = message;
    //else delete errorsClone[e.target.name];

    //const acountClone = { ...keyWord };
    //acountClone[e.target.name] = e.target.value;
    setKeyWord(e.target.value);
    //setError(errorsClone);
  };

  return (
    <div>
      <div className="centeral-container">
        <div className="container">
          <div className="row login-form-row">
            <div className="col-5">
              <form onSubmit={handleSubmit} className="login-form" noValidate>
                <div className="form-row">
                  <div className="col username-col">
                    <div className="form-group right2left">
                      <label>
                        <span className="label_of_login_form_fields farsi">
                          جستجوی هوشمند برنامه
                        </span>
                      </label>
                      <input
                        className="form-control mt-1 farsi"
                        type="text"
                        placeholder="جستجو با کلید واژه (برنامه، نسخه، تولیدکننده و ...)"
                        id="username-input"
                        name="username"
                        onChange={handleChange}
                      ></input>
                      {error && (
                        <div className="alert alert-danger farsi">{error}</div>
                      )}
                    </div>
                  </div>
                </div>

                <div className="btns-row-and-login-link">
                  <div className="form-row mt-4 btns-row-of-login-page">
                    <button
                      className="btn btn-primary submit_btn_of_login_page"
                      type="submit"
                      disabled={error}
                    >
                      <div className="btns-row-of-submit-and-reset-btn farsi">
                        جستجو
                      </div>
                    </button>

                    <button
                      onClick={() => {
                        setKeyWord("");
                        setError("");
                      }}
                      className="btn btn-outline-dark reset-btn-of-login-form"
                      type="reset"
                    >
                      <div className="btns-row-of-submit-and-reset-btn farsi">
                        بازنشانی
                      </div>
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
        <PropagateLoader
          className="mt-3"
          color={"#a4b5ff"}
          loading={loading}
          size={12}
          aria-label="Loading Spinner"
          data-testid="loader"
        />

        <SyncLoader
          className="mt-3"
          color={"#a4b5ff"}
          loading={loadingOfAddition}
          size={12}
          aria-label="Loading Spinner"
          data-testid="loader"
        />
      </div>

      <div className="HomePage-container">
        {cpes[0] && (
          <CPEtable
            items={cpes}
            makeLoadingOfAdditionTrue={() => {
              setLoadingOfAddition(true);
            }}
            makeLoadingOfAdditionFalse={() => {
              setLoadingOfAddition(false);
            }}
          ></CPEtable>
        )}
      </div>
    </div>
  );
};
export default SearchProgram;
