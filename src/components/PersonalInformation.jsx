import React, { useState, useEffect } from "react";
import http from "../services/httpService.js";
import { toast } from "react-toastify";
import { validate, validateField } from "../services/validation.js";
import Joi from "joi-browser";
import "../style/loginAndRegister.css";
import "../style/profilePage.css";

const PersonalInformation = ({ user }) => {
  const [isAnythingChanged, setIsAnythingChanged] = useState(false);

  const [acount, setAcount] = useState({
    email: "",
    phoneNumber: "",
  });
  const [errors, setErrors] = useState({
    email: "",
    phoneNumber: "",
  });

  const schema = {
    email: Joi.string()
      .required()
      .email()
      .error((errors) => {
        return errors.map((error) => {
          switch (error.type) {
            case "any.empty":
              return { message: "ایمیل نمی‌تواند خالی باشد!" };
            case "string.email":
              return { message: "ایمیل معتبر نیست!" };
          }
        });
      }),
    phoneNumber: Joi.string()
      .required()
      .min(3)
      .max(15)
      .error((errors) => {
        return errors.map((error) => {
          switch (error.type) {
            case "string.min":
              return { message: "شماره تلفن باید حداقل 3 رقم باشد!" };
            case "string.max":
              return { message: "شماره تلفن باید حداکثر 15 رقم باشد!" };
            case "any.empty":
              return { message: "رمز عبور نمی‌تواند خالی باشد!" };
          }
        });
      }),
  };

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await http.get("http://localhost:3001/users/me", {
          headers: { "x-auth-token": localStorage.getItem("token") },
        });

        if (res.data.phoneNumber) {
          setAcount({
            email: res.data.email,
            phoneNumber: res.data.phoneNumber,
          });
          document.getElementById("phoneNumber-input").defaultValue =
            res.data.phoneNumber;
        } else {
          setAcount({ email: res.data.email, phoneNumber: acount.phoneNumber });
        }
      } catch (e) {
        if (e.response && e.response.status == 401) {
          window.location = "/";
        }
      }
    }
    fetchData();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isAnythingChanged) return;

    const joiErrors = validate(acount, schema);
    setErrors(joiErrors || {});

    if (joiErrors && acount.phoneNumber.length != 0) return;

    try {
      const response = await http.put(
        `http://localhost:3001/users/me/info`,
        { email: acount.email, phoneNumber: acount.phoneNumber },
        { headers: { "x-auth-token": localStorage.getItem("token") } }
      );
      toast.success("مشخصات کاربر تغییر کرد");
      setIsAnythingChanged(false);
    } catch (e) {
      if (e.response && e.response.status == 400) {
        const errorsClone = { ...errors };
        errorsClone.username = e.response.data;
        setErrors(errorsClone);
      }
    }
  };

  const handleChange = async (e) => {
    setIsAnythingChanged(true);
    const errorsClone = { ...errors };
    const message = validateField(e, schema);
    if (message) errorsClone[e.target.name] = message;
    else delete errorsClone[e.target.name];

    const acountClone = { ...acount };
    acountClone[e.target.name] = e.target.value;
    setAcount(acountClone);
    setErrors(errorsClone);
  };

  return (
    <div className="simple-card">
      <form className="login-form" onSubmit={handleSubmit} noValidate>
        <div className="form-group right2left">
          <label htmlFor="username-input">
            <span className="label_of_login_form_fields farsi">نام کاربری</span>
          </label>
          <input
            className="form-control farsi username-input"
            type="text"
            placeholder="نام کاربری شما این است"
            value={user.username}
            id="username-input"
            name="username"
            disabled
          ></input>
        </div>

        <div className="form-group right2left email-form-group">
          <label htmlFor="email-input">
            <span className="label_of_login_form_fields farsi">ایمیل</span>
          </label>
          <input
            className="form-control farsi email-input email-input"
            type="email"
            placeholder="ایمیل شما این است..."
            id="email-input"
            name="email"
            defaultValue={acount.email}
            onChange={handleChange}
          ></input>
          {errors.email && (
            <div className="alert alert-danger farsi">{errors.email}</div>
          )}
        </div>

        <div className="form-group right2left phone-number-form-group">
          <label htmlFor="phoneNumber-input">
            <span className="label_of_login_form_fields farsi">شماره تلفن</span>
          </label>
          <input
            className="form-control farsi phoneNumber-input"
            type="text"
            placeholder="شماره تلفن خود را وارد کنید (اختیاری)"
            id="phoneNumber-input"
            name="phoneNumber"
            onChange={handleChange}
          ></input>
          {acount.phoneNumber.length != 0 && errors.phoneNumber && (
            <div className="alert alert-danger farsi">{errors.phoneNumber}</div>
          )}
        </div>

        <div className="submit-button">
          <button
            disabled={
              (errors.phoneNumber && acount.phoneNumber.length != 0) ||
              errors.email ||
              !isAnythingChanged
            }
            className="btn btn-primary submit_btn_of_login_page"
            type="submit"
          >
            <div className="farsi">ثبت تغییرات</div>
          </button>
        </div>
      </form>
    </div>
  );
};

export default PersonalInformation;
